# 続C言語エンジニアは知っている常識 #2

注意！本内容は「C言語エンジニアは知っている常識 #1」をやったことを前提にしています。


# 今日習得すること
+ mallocとfree
+ 構造体 
+ データ構造の自作
+ ヘッダーファイル
+ 実習

# 前回のおさらい

## 仮想アドレス空間
![仮想アドレス空間](https://github.com/hanhan1978/study_notes/blob/master/memory.png)

# 1. mallocとfree
## ヒープに領域を確保する
余程の小さいプログラムを除いて、プログラム内の関数間でデータをやり取りするため
C言語のプログラムでは、`malloc`という関数を使ってヒープに領域を確保して、情報を保持させます。

`malloc`は`stdlib.h`という共有ライブラリに含まれます。

memory allocationを略したものです。


`free`は、ヒープに確保した領域を解放します。
ヒープに確保した領域は明示的に解放しなければ、プログラムの実行が終了するまで解放されません。

デーモンプログラムなどでは、メモリの解放忘れは致命的です。
プロセスが長く生存するに従って、解放されないメモリ領域が増えていき、メモリを使い尽くしてしまいます。
これはメモリリークと呼ばれます。

とある現場では、巨大なデーモンプログラムのどこでメモリリークが発生しているのかを特定出来なかったため
３日に１回の頻度で、強制的に再起動することで、メモリの解放を行っていました。
あのプログラムはまだ動いているのだろうか・・・。

## 演習問題 1-1
malloc freeを体験するプログラムです。

## 演習問題 1-2
ヒープを使って、関数間をまたいでデータをやり取りします。

### 重要な考え方
ヒープを使わなかった場合を想像します。

=> ヒープを使わない場合、データのやり取り使えるのはグローバル変数のみです。
=> メモリ空間を意識出来てない現場では、関数間でやり取りするデータを全てグローバル変数にするという情けない実体もあるようです。
=> よほどの駄目なエンジニアでなければ、グローバルの乱用がどのような結果はわかると思います。なので、ヒープの存在意義を理解してもらえればと思います。


# 2. 構造体 

構造体は、基本データ型、及び任意のポインタ
の組み合わせで構成されるユーザ定義のデータの集まりです。

C言語では、関数も関数ポインタという形で、ポインタ扱い可能です。

データを定義できて、関数をもつことができる・・・ん？　オブジェクト指向のクラスに近いです。
アクセス修飾子とかはないですが・・・

## 演習問題2-1
とりあえず構造体を作ってみましょう。

C言語では、言語自体がサポートするデータ型が少ないので、欲しいデータ構造は自作するのが普通のようです。





# 3. データ構造の自作
リンク度リストを自作してみましょう。


# 4. ヘッダーファイル

共有ライブラリをインクルードするとき、hoge.hという名前を使いますが、hってなんでしょうか？

ｈの拡張子をもつファイルはヘッダーファイルと呼ばれます。
なるほどなるほど、ヘッダーファイルという特殊なファイルなんだな・・・という考えはNGです。

ヘッダーファイルは、単なるCのファイルです。

C言語では、関数は巻き上がりません。そのため、関数は使う場所よりも前で宣言されている必要があります。
そのため、関数を定義する場合、その定義情報をファイルの最初の方で書いておいて、コンパイル時にそんな関数ないっすっていうエラーになるのを防ぎます。

コンパイルのために、関数の実装とは別に関数の定義を最初に書いておくものをプロトタイプ宣言と呼びます。

## 演習問題4-1
プロトタイプ宣言をやってみましょう。

まずは、プロトタイプ宣言無し。

次に、プロトタイプ宣言を追加

渓谷の内容をちゃんと読んでみて下さい。

## 演習問題4-2

プロトタイプ宣言や、グローバル変数の定義を一つのファイル
にまとめて、拡張子hでファイルを作成します。




実はこれがヘッダーファイルの正体です。


ある程度の規模のCプログラムであれば、必ずヘッダーファイルを作る・・・と思います。
ヘッダーファイルを用意することで、複数のファイルから、関数を呼び出すことが可能となります。



# 5. 実習
