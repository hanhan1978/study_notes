# WebエンジニアのためのC言語入門ハンズオン #4

# 今日習得すること
+ C言語のデバッグ方法
+ printfマクロを使ったデバッグ演習
+ デバッガの仕組み
+ gdbを使ったデバッグ演習 
+ おまけ lldb

# 概略
C言語におけるデバッグ、及びデバッグに関係する小技を解説します。
printfデバッグだけでは、すぐに限界が来てしまいます。

また、作った後、数ヶ月経過したプログラムでは、どこにprintfをおけば、効果的にデバッグできるのかを
思い出すだけで大変です。

`printf`デバッグだけでなく、デバッガの使い方を覚えることで、初心者レベルを脱出しましょう。

# 1. C言語のデバッグ方法

## printf
PHPにおける`var_dump`デバッグに近いものです。使い方も簡単で、分かりやすい。
欠点としては、プロダクションのコードに残してはいけないということです。

デバッグ時に仕込んだ`printf`は、デバッグ完了時に取り除かなければならないので、面倒臭いです。
もし、同じ箇所でバグが発生した場合は、また入れなおしになってしまいます。


## printfマクロ
小規模プログラムであれば充分に機能します。
マクロを使って、`printf`を置換えてしまいます。

有名なところでは、ヘッダーファイルで下記のようなマクロを定義します。

```
#define eprintf(...) fprintf(stderr, __VA_ARGS__) 
```
マクロは、コンパイル前にプリプロセッサによって置換されます。
よって、eprintf関数は、fprintfとして動作します。


デバッグが終わったら、マクロを以下のように書き直します。
```
#define eprintf(...) if(true){} 
```

すると、`eprintf`は特に何もしないコードに置き換わります。

マクロを使う方法は、ログ出力を行うコードに置換えたり等、汎用性がありそうです。
重要な情報については、とりあえず`eprintf`で出力しておけば、後々デバッグがしやすくなりそうです。


## デバッガ
本日のメインイベントです。
以下は、代表的なC言語のデバッグです。

+ gdb  

+ ddd  

+ cgdb  

+ eclipse CDT




