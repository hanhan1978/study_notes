# WebエンジニアのためのC言語入門ハンズオン #4

# 今日習得すること
+ C言語のデバッグ方法
+ printfマクロを使ったデバッグ演習
+ デバッガの仕組み
+ gdbを使ったデバッグ演習 
+ おまけ lldb

# 概略
C言語におけるデバッグ、及びデバッグに関係する小技を解説します。

作った後、数ヶ月経過したプログラムでは、どこにprintfをおけば、効果的にデバッグできるのかを思い出すだけで大変です。

`printf`デバッグだけでなく、デバッガの使い方を覚えることで、初心者レベルを脱出しましょう。

# 1. C言語のデバッグ方法

## printf
PHPにおける`var_dump`デバッグに近いものです。使い方も簡単で、分かりやすい。 
欠点としては、プロダクションのコードに`printf`を残してはいけないということです。

そのため、デバッグ時に仕込んだ`printf`は、デバッグ完了時に取り除く必要があります。  
もし、同じ箇所でバグが発生した場合は、また入れなおしになってしまいます。

小規模プログラムであれば充分に機能しますが、原始的ですしあまりスマートな感じはしません。

## printfマクロ
マクロを使って、`printf`を置換える方法です。

基本スタイルは`printf`デバッグと同様なのですが、マクロを使うことで、`printf`を撤去する必要がなくなります。

ヘッダーファイルで下記のようなマクロを定義します。
```
#define eprintf(...) fprintf(stderr, __VA_ARGS__) 
```
マクロは、コンパイル前にプリプロセッサによって置換されます。
よって、eprintf関数は、fprintfとして動作します。


デバッグが終わったら、マクロを以下のように書き直します。
```
#define eprintf(...) if(true){} 
```

すると、`eprintf`は特に何もしないコードに置き換わります。

マクロを使う方法は、ログ出力を行うコードに置換えたり等、汎用性がありそうです。
重要な情報については、とりあえず`eprintf`で出力しておけば、後々デバッグがしやすくなりそうです。

ただし、原始的なデバッグ方法であることには代わりは無いです。


## デバッガ
本日のメインイベントです。
変数の中身を見たり、ステップ実行したり出来ます。

以下は、代表的なC言語のデバッグです。

+ gdb  
GNUシステムの一部として、ストールマンが作成したデバッガ。
=> 組み込み系用にリモートデバッグも可能。
+ ddd  
gdbのGUIインターフェース。機能はGDBと同様だがGUIで操作できる。
+ cgdb  
vimキーバインドで操作できるコマンドラインのgdbインターフェース。
デバッガ作動時にソースコード表示などが出来る。
+ eclipse CDT
IDEのgdbインターフェース。最近はeclipseが下火っぽいので、どれくらいメンテされているのかは分からない。





